@using SixLabors.Fonts;
@using SixLabors.Fonts.Unicode;
@using System.Text.Unicode;
@using System.Text;
@using System.Runtime.CompilerServices;
@using System.Numerics;
@inject IJSRuntime JsRuntime

<MudTextField Label="Text" Lines="@lines" Placeholder="Some text to show" @bind-Value="@text" DebounceInterval="100" Variant="Variant.Outlined" />
<MudSlider @bind-Value="@size">Size - @(size)pt</MudSlider>
<MudSelect T="SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags"
           Label="Features"
           MultiSelection="true"
           MultiSelectionTextFunc="ProcessTagSelectList"
           Variant="Variant.Outlined" @bind-SelectedValues="FeatureTags" AnchorOrigin="Origin.BottomCenter">
    @foreach (var tag in Enum.GetValues<SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags>())
    {
        <MudSelectItem Value="@tag">@(FeatureTagMeta.GetName(tag))</MudSelectItem>
    }
</MudSelect>

<div style="overflow:auto" id="text-area">
    @if (renderError != null)
    {
        <MudAlert Severity="Severity.Error">@(renderError.Message)</MudAlert>

    }
    else if (CanRenderSvg)
    {
        <MudPaper Class="svg-text">
            @((MarkupString)Svg)
        </MudPaper>
    }
    else
    {
        <MudAlert Severity="Severity.Warning">@(FontFamily.Name) in @(FriendlyStyleName) is not avalible, you'll need to load additional font files for this combination to work.</MudAlert>
    }
</div>


@code {
    private IEnumerable<SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags> _tags = Enumerable.Empty<SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags>();

    [Parameter]
    public IEnumerable<SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags> FeatureTags
    {
        get => _tags;
        set
        {
            _tags = value;
            _ = RefreshSvg();
        }
    }

    private FontFamily _fontFamily;

    [Parameter]
    public FontFamily FontFamily
    {
        get => _fontFamily;
        set
        {
            _fontFamily = value;
            _ = RefreshSvg();
        }
    }

    public FontStyle _style { get; set; }
    [Parameter]
    public FontStyle Style
    {
        get => _style;
        set
        {
            _style = value;
            _ = RefreshSvg();
        }
    }

    public string FriendlyStyleName => Style switch
    {
        FontStyle.BoldItalic => "Italic Bold",
        _ => Style.ToString()
    };

    public bool IsBold => Style.HasFlag(FontStyle.Bold);
    public bool IsItalic => Style.HasFlag(FontStyle.Italic);

    private string _text = "The quick brown fox jumps over the lazy dog.";

    private string text
    {
        get => _text;
        set
        {
            _text = value;
            lines = (value ?? "").Split('\n').Length + 1;
            _ = RefreshSvg();
        }
    }
    private Exception? renderError = null;

    private int _size = 64;
    private int size
    {
        get => _size;
        set
        {
            _size = value;
            _ = RefreshSvg();
        }
    }

    private bool CanRenderSvg
    {
        get => FontFamily.GetAvailableStyles().Contains(Style);
    }

    private int lines = 2;

    public async Task RefreshSvg()
    {
        try
        {
            renderError = null;
            SvgLoading = true;
            var old = Svg;
            Svg = null;

            var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getElementDimensions", "#text-area");
            int counter = 100;
            while (dimension == null && counter > 0)
            {
                --counter;
                await Task.Delay(100);
                dimension = await JsRuntime.InvokeAsync<WindowDimension>("getElementDimensions", "#text-area");
            }

            var padding = 20;
            var width = (dimension?.Width ?? 1000) - (padding * 2);
            var font = FontFamily.CreateFont(size, Style);

            var opts = new TextOptions(font)
                {
                    WrappingLength = width,
                    WordBreaking = WordBreaking.BreakWord,
                    FeatureTags = FeatureTags.Select(x => (SixLabors.Fonts.Tables.AdvancedTypographic.Tag)x).ToArray(),
                };
            // wrapper size!!!
            var renderer = new SvgTextFontRenderer(opts)
                {
                    Padding = padding,
                };
            TextRenderer.RenderTextTo(renderer, text, opts);

            Svg = renderer.Svg;
            if (old != Svg)
            {
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            renderError = ex;
            this.StateHasChanged();
        }
    }

    private bool SvgLoading { get; set; } = false;
    private string Svg { get; set; }
    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    protected override Task OnInitializedAsync()
    {
        _ = RefreshSvg();
        return base.OnInitializedAsync();
    }

    string ProcessTagSelectList(List<string> items)
    {
        return string.Join(", ", items.Select(Enum.Parse<SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags>).Select(x => FeatureTagMeta.GetName(x)));
    }
}
