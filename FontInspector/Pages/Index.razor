@page "/"
@using SixLabors.Fonts;
@inject ISnackbar Snackbar

<PageTitle>Font Inspector</PageTitle>

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   OnFilesChanged="OnInputFileChanged"
                      AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
     @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
         <ButtonTemplate>
             <MudPaper Outlined="true" Class="@DragClass">
                 @if (badFileNames.Any())
                {
                    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled">Failed to load @string.Join(",", badFileNames)</MudAlert>
                }

                @if (fontCollection.Families.Any())
                {
                    @foreach (var font in fontCollection.Families)
                    {
                        @foreach (var style in font.GetAvailableStyles())
                        {
                            <MudChip Color="Color.Dark" Text="@($"{font.Name} ({style})")" />
                        }
                    }

                    <MudText Typo="Typo.subtitle2">Drag and drop files here or click</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                }

            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    @*     <MudToolBar DisableGutters="true" Class="gap-4">
    <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
    <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar> *@
    @foreach (var family in fontCollection.Families)
    {
        <MudPaper Class="pa-3">
            <Family FontFamily="@family" />
        </MudPaper>
    }
</MudStack>


@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private List<string> badFileNames = new List<string>();
    private FontCollection fontCollection = new();

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        badFileNames.Clear();

        foreach (var file in files)
        {
            try
            {
                using var fs = file.OpenReadStream();
                using var ms = new MemoryStream();
                await fs.CopyToAsync(ms);
                ms.Position = 0;
                var fontFamily = fontCollection.Add(ms);
                fileNames.Add($"{file.Name}({fontFamily.Name})");
            }
            catch (Exception ex)
            {
                badFileNames.Add(file.Name);
            }
        }
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    private void Upload()
    {
        //Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!", Severity.Normal);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}