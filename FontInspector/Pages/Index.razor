@page "/"
@using SixLabors.Fonts;
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<PageTitle>Font Inspector</PageTitle>

<MudStack Class="pa-6">
    @if (families.Any())
    {

        <MudItem>
            <MudStack Row="true">

                <MudSelect T="FontFamily" Label="Family" Variant="Variant.Outlined" @bind-Value="selectedFont" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var font in families)
                    {
                        <MudSelectItem T="FontFamily" Value="@font">@font.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudCheckBox @bind-Checked="IsItalic" Label="italic"></MudCheckBox>
                <MudCheckBox @bind-Checked="IsBold" Label="bold"></MudCheckBox>
            </MudStack>
        </MudItem>

        <MudTabs Rounded="true" PanelClass="pt-6">
            <MudTabPanel Text="Code Points">
                <Glyphs FontFamily="@selectedFont" Style="@style" />
            </MudTabPanel>
            <MudTabPanel Text="Text">
                <Text FontFamily="@selectedFont" Style="@style" />

            </MudTabPanel>
            <MudTabPanel Text="Files">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                               OnFilesChanged="OnInputFileChanged"
                                  AppendMultipleFiles Hidden="false" Class="flex-1"
                                InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                 @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                     <ButtonTemplate>
                         <MudPaper Outlined="true" Class="@DragClass">
                             @if (loadingFonts)
                            {
                                <p>Loading...</p>
                                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                            }
                            else
                            {
                                @if (badFileNames.Any())
                                {
                                    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled">Failed to load @string.Join(",", badFileNames)</MudAlert>
                                }

                                @if (fileNames.Any())
                                {
                                    @foreach (var file in fileNames)
                                    {
                                        <MudChip Color="Color.Dark" Text="@file" />
                                    }

                                    <MudText Typo="Typo.subtitle2">Drag and drop files here or click to load one or more font files. (Max 2Mb per file)</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.h6">Drag and drop files here or click to load one or more font files. (Max 2Mb per file)</MudText>
                                }
                            }

                        </MudPaper>
                    </ButtonTemplate>
                </MudFileUpload>
                @if (!opensansLoaded)
                {
                    <MudButton OnClick="LoadOpenSans" Color="Color.Secondary">Load Open Sans</MudButton>
                }
                @if (!twemojiLoaded)
                {
                    <MudButton OnClick="LoadTwemoji" Color="Color.Secondary">Load Twemoji</MudButton>
                }
            </MudTabPanel>
        </MudTabs>
    }
    else
    {
        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                       OnFilesChanged="OnInputFileChanged"
                          AppendMultipleFiles Hidden="false" Class="flex-1"
                        InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                        InputStyle="opacity:0"
         @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
             <ButtonTemplate>
                 <MudPaper Outlined="true" Class="@DragClass">
                     @if (loadingFonts)
                    {
                        <p>Loading...</p>
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        @if (badFileNames.Any())
                        {
                            <MudAlert Severity="Severity.Normal" Variant="Variant.Filled">Failed to load @string.Join(",", badFileNames)</MudAlert>
                        }

                        <MudText Typo="Typo.h6">Drag and drop files here or click to load one or more font files. (Max 2Mb per file)</MudText>
                    }
                </MudPaper>
            </ButtonTemplate>
        </MudFileUpload>

        @if (!loadingFonts)
        {
            <text>
                <p>Dont have a font file? try it out one of these. <MudButton OnClick="LoadOpenSans" Color="Color.Secondary">Load Open Sans</MudButton> or <MudButton OnClick="LoadTwemoji" Color="Color.Secondary">Load Twemoji</MudButton></p>
            </text>
        }
    }

</MudStack>


@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private HashSet<string> fileNames = new HashSet<string>();
    private HashSet<string> badFileNames = new HashSet<string>();
    private FontCollection fontCollection = new();
    private FontFamily _selectedFont = default;
    private FontFamily selectedFont
    {
        get => _selectedFont;
        set
        {
            _selectedFont = value;
            var styles = _selectedFont.GetAvailableStyles();
            if (!styles.Contains(style))
            {
                style = styles.First();
            }
            _selectedFont = value;
        }
    }
    private bool loadingFonts = false;

    private FontStyle style { get; set; } = FontStyle.Regular;

    [Parameter]
    public bool IsBold
    {
        get => style.HasFlag(FontStyle.Bold);
        set
        {
            if (value)
            {
                style |= FontStyle.Bold;
            }
            else
            {
                style &= ~FontStyle.Bold;
            }
        }
    }

    [Parameter]
    public bool IsItalic
    {
        get => style.HasFlag(FontStyle.Italic);
        set
        {
            if (value)
            {
                style |= FontStyle.Italic;
            }
            else
            {
                style &= ~FontStyle.Italic;
            }
        }
    }

    private IEnumerable<FontFamily> families = Enumerable.Empty<FontFamily>();

    private bool twemojiLoaded = false;
    private bool opensansLoaded = false;

    private async Task LoadTwemoji(MouseEventArgs e)
    {
        twemojiLoaded = true;
        var urls = new[]
        {
            "./sample-data/Twemoji.Mozilla.ttf",
    };
        await LoadRemoteFonts(urls);
    }

    private async Task LoadOpenSans(MouseEventArgs e)
    {
        opensansLoaded = true;
        var urls = new[]
        {
            "./sample-data/OpenSans-Bold.ttf",
            "./sample-data/OpenSans-Italic.ttf",
            "./sample-data/OpenSans-BoldItalic.ttf",
            "./sample-data/OpenSans-Regular.ttf",
    };
        await LoadRemoteFonts(urls);
    }

    private async Task LoadRemoteFonts(IEnumerable<string> urls)
    {
        loadingFonts = true;
        await Task.Yield();

        try
        {
            var fetchers = urls.Select(async x => new
            {
                filenames = x.Substring(x.LastIndexOf('/')+1),
                response = await HttpClient.GetAsync(x),
            });

            var fetched = await Task.WhenAll(fetchers);
            var fonts = fetched.Select(x => (x.filenames, (Func<Stream>)(() => x.response.Content.ReadAsStream())));
            await InstallFonts(fonts);
        }
        catch (Exception ex)
        {
            badFileNames.Add($"OpenSans (fetch) - {ex.Message}");
        }
    }

    private async Task InstallFont(string filename, Func<Stream> streamFunc)
    {
        try
        {
            using var fs = streamFunc();
            using var ms = new MemoryStream();
            await fs.CopyToAsync(ms);
            ms.Position = 0;
            var fontFamily = fontCollection.Add(ms, out var desc);
            selectedFont = fontFamily;
            style = desc.Style;
            fileNames.Add($"{filename} ({fontFamily.Name})");
        }
        catch (Exception ex)
        {
            badFileNames.Add($"{filename} - {ex.Message}");
        }
    }

    private async Task InstallFonts(IEnumerable<(string filename, Func<Stream> streamFunc)> files)
    {
        loadingFonts = true;
        await Task.Yield();

        ClearDragClass();
        badFileNames.Clear();

        foreach (var file in files)
        {
            await InstallFont(file.filename, file.streamFunc);
        }
        families = fontCollection.Families;
        loadingFonts = false;

        if (selectedFont == default)
        {
            selectedFont = families.FirstOrDefault();
        }
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        var fonts = files.Select(x => (x.Name, (Func<Stream>)(() => (Stream)x.OpenReadStream(maxAllowedSize: 2048000))));
        await InstallFonts(fonts);
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void Upload()
    {
        //Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!", Severity.Normal);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}